let dupTest = {
  posNums: [],
  // prevPosNums: [],  // storing for highlighting/dehighlighting of duplicate position numbers
};


$('.pages.stage').ready(function() {

  const getFixtureId = function( node ) {
    // console.log(node.data('fid'));
    return node.data('fid');
  }

  $('body').on('change', '.f-param', function() {
      const fid = getFixtureId( $(this) );
      // ** get which INDEX in current fixtures array this fid is ***
      const id = _(fixtures).findIndex( {'fid': fid} );
      // get which property this input relates to
      const prop = $(this).data('prop');
      // cache value
      let value = +( $(this).val() );
      // change property's value in fixture obj
      switch (prop) {
        case 'pos':
            fixtures[id].posNum = parseInt( value ); // neg numbers ok, only stopping users using float
          break;
        case 'x':
          if (value < 0) {
            value = 0;
            fixtures[id].x = value;
            $(this).val( value );
          } else if (value >= vw) {
            value = vw - 1;
            fixtures[id].x = value;
            $(this).val( value );
          } else {
            fixtures[id].x = value;
          }
          break;
        case 'y':
          if (value < 0) {
            value = 0;
            fixtures[id].y = value;
            $(this).val( value );
          } else if (value >= vh) {
            value = vh - 1;
            fixtures[id].y = value;
            $(this).val( value );
          } else {
            fixtures[id].y = value;
          }
          break;
        default:
          console.log( `Invalid property data` );
      }
      // *** HIGHLIGHTING DUPLICATE POSITION NUMBER
      dupTest.posNums = getPosNums();
      // if this is a posNum field that was changed
      if ( $(this).data().prop === 'pos' ) {
        // see if this posNum has already been used
        const occurs = _(dupTest.posNums).countBy(function(n) {
          return n === value;
        });
        if (occurs.true > 1) {
          $(this).addClass('dup');
        } else {
          $(this).removeClass('dup');
        }
        //   TODO better implementation to consider
        //   if more than one dup created concurrently
        // if all values only occur once, remove highlight
        if ( dupTest.posNums.length === _(dupTest.posNums).uniq().length ) {
          // remove highlight on other fields
          $('.f-param').removeClass('dup');
        }
      }


      if (overlay) {
        refreshWithOverlay();
      } else {
        refresh();
      }
      // dupTest.prevPosNums = dupTest.posNums.slice(); TODO part of better implementation
  });  // end on change input




  $('body').on('click', '.f-delete', function() {
      const deleteConfirmed = confirm( `Are you sure you want to delete this fixture?` );
      if (!deleteConfirmed) return;
      const id = getFixtureId( $(this) );
      // find fixture to delete by fid
      const indexToDelete = _(fixtures).findIndex( {'fid': id} );
      // remove fixture
      fixtures.splice( indexToDelete, 1 ); // mutating!!
      // remove a placeholder in LUT
      lut.pop();
      // now render new view
      fixtureLog( true );
      if (overlay) {
        refreshWithOverlay();
      } else {
        refresh();
      }
  });

  $('#f-sort').on('click', function() {
    fixtureLog( true ); // sort = true
  });

}); // end doc ready

const refresh = function() { // TODO might be other occurrences that could be refactored
    drawFixtures();
    simCtx.clearRect(0, 0, vw, vh);
    drawSim();
};

const refreshWithOverlay = function() {
  drawFixtures();
  simCtx.clearRect(0, 0, vw, vh);
  drawSimOverlay();
}

const getPosNums = function() {
  let posNumsArray = [];
  fixtures.forEach(function(f) {
    posNumsArray.push( f.posNum );
  });
  return posNumsArray;
};











// **

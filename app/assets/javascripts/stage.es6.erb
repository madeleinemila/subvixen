let video, stage, stageCtx, sim, simCtx, vw, vh;
const fixtures = [];

// only run this js on stage page ready
$('.pages.stage').ready(function() {
  // using vanilla js from this point on to avoid vid/canvas perform issues
  // get video
  video = document.getElementById('stage-video');
  // get canvas contexts
  stage = document.getElementById('stage-canvas');
  stageCtx = stage.getContext('2d');
  sim = document.getElementById('sim-canvas');
  simCtx = sim.getContext('2d');

  // when video metadata is available
  video.addEventListener('loadedmetadata', function() {
    vw = this.videoWidth || this.width;
    vh = this.videoHeight || this.height;
    stage.width = vw;
    sim.width = vw;
    stage.height = vh;
    sim.height = vh;
    // show first frame
    video.play();
    setTimeout(function() {
      video.pause();
      video.currentTime = 0;
    }, 100 );


    // ******* FIXTURE CREATION *********



    // fixture log helper
    const fixtureLog = function() {
        $('#fixtures-main').empty();
        for (let i = 0; i < fixtures.length; i++) {
          const f = fixtures[i];
          const node = $(`<p>${ i + 1 }. ${ f.x }, ${ f.y }</p>`);
          node.appendTo( "#fixtures-main" );
        }
    };

    stage.addEventListener('click', function(e) {
      const mousePos = getMousePos( this, e );
      fixtures.push({
        x: mousePos.x,
        y: mousePos.y,
        color: getPixelHex( stageCtx, mousePos.x, mousePos.y ),
      });
      drawFixtures();
      drawSim();
      fixtureLog();
    });


    // when video plays, draw to the canvases (canvi?)
    video.addEventListener('play', drawVideo, false);





  }, false); // explicit false re useCapture for older browser compat











}); // end page ready






// ******************** Component functions ***************************


// circle helper function
const drawCircle = function( x, y, r, fill, strokeWidth, strokeColor, context ) {
    context.beginPath();
    context.arc(x, y, r, 0, 2 * Math.PI, true);
    context.fillStyle = fill;
    context.fill();
    context.lineWidth = strokeWidth;
    context.strokeStyle = strokeColor;
    context.stroke();
};

const drawSim = function() {
  if (fixtures) {
    fixtures.forEach(function(f) {
      f.color = getPixelHex( stageCtx, f.x, f.y );
      drawCircle( f.x, f.y, 10, f.color, 5, f.color, simCtx );
    });
  }
};

const drawFixtures = function() {
  if (fixtures) {
    fixtures.forEach(function(f) {
      drawCircle( f.x, f.y, 3, '#FFF0', 15, '#222', stageCtx );
    });
  }
};

const drawVideo = function() {
  if (video.paused || video.ended) {
    return;
  }
  if (gen) {
    console.log( `RECORDING` );
  }
  stageCtx.drawImage(video, 0, 0, vw, vh); // draw new video frame
  drawFixtures(); // draw fixtures back over the top of video
  simCtx.clearRect(0, 0, vw, vh); // clear previous sim canvas to avoid aliasing
  drawSim(); // draw fixtures back into sim
  requestAnimationFrame( drawVideo );
};






// ~~~ Fixture x & y from mouse click

const getMousePos = function( canvas, event ) {
  // console.log(event);
  const rect = canvas.getBoundingClientRect(); // to use clientX and clientY and normalize across browsers
  const x = event.clientX - rect.left;
  const y = event.clientY - rect.top;
  return { x, y };
}


// ~~~ Fixture color for pixel hex

const hex = function( value ) {
  const hex = value.toString(16);
  return hex.length === 1 ? `0${hex}` : hex;
};

const getPixelHex = function( context, x, y ) {
  const rgb = context.getImageData( x, y, 1, 1 );
  return "#" + hex( rgb.data[0] ) + hex( rgb.data[1] ) + hex( rgb.data[2] );
};

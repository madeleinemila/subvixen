let video, stage, stageCtx, sim, simCtx, vw, vh, numFrames;
const fixtures = [];
const lut = [];


$('.pages.stage').ready(function() {
  // using vanilla js from this point on to avoid vid/canvas perform issues

  video = document.getElementById('stage-video');
  stage = document.getElementById('stage-canvas');
  stageCtx = stage.getContext('2d');
  sim = document.getElementById('sim-canvas');
  simCtx = sim.getContext('2d');

  // when video metadata is available
  video.addEventListener('loadedmetadata', function() {
    vw = this.videoWidth || this.width;
    vh = this.videoHeight || this.height;
    stage.width = vw;
    sim.width = vw;
    stage.height = vh;
    sim.height = vh;
    numFrames = video.duration / frameInterval;
    video.currentTime = 0;
    setTimeout(function() {
      rigLibraryFixtures();
      drawNewStageFrame();
      refresh();
      fixtureLog();
    }, 300);


    // ******* FIXTURE CREATION *********


    // FYI, 'shape' of fixture object
    // fid, x, y, color, posNum i.e. position in user's hardware circuit

    stage.addEventListener('click', function(e) {
      const mousePos = getMousePos( this, e );
      addFixtureToArray( mousePos.x, mousePos.y );
      let xMirrored, yMirrored;
      if (sym.symH) {
        if (mousePos.x !== vw / 2) {
          xMirrored = vw - mousePos.x;
        }
        addFixtureToArray( xMirrored, mousePos.y );
      }


    });

    const addFixtureToArray = function( x, y ) {
        fixtures.push({
          fid: fixtures.length, // unique identifier so user can change posNum any way
          x: Math.round( x ),
          y: Math.round( y ),
          color: getPixelHex( stageCtx, x, y ),
        });
        // add a temp position number based on ** one higher than largest posNum **
        if (1 === fixtures.length) {
          fixtures[0].posNum = 1;
        } else {
          const posNums = getPosNums( fixtures );
          _(fixtures).last().posNum = _(posNums).max() + 1;
        }
        // n.b. also add empty array elem to LUT at this point
        lut.push( new Array(1) );
        drawFixtures();
        if (overlay) {
          drawSimOverlay();
        } else {
          drawSim();
        }
        fixtureLogAppend( _(fixtures).last() );
    };


    // when video plays, draw to the canvases (canvi?)
    video.addEventListener('play', drawVideo, false);





  }, false); // explicit false re useCapture for older browser compat











}); // end page ready






// ******************** Component functions ***************************

// get fixtures from selected rig in rig library
const rigLibraryFixtures = function() {
  if (typeof gon !== "undefined") {
    gon.fixtures.forEach((f) => {
      fixtures.push({
        fid: f.id,
        x: f.x,
        y: f.y,
        color: getPixelHex( stageCtx, f.x, f.y ),
        posNum: f.position_number,
      });
      // make placeholder in lut
      lut.push( new Array(1) );
    });
  }
};


// circle helper function
const drawCircle = function( x, y, r, fill, strokeWidth, strokeColor, context ) {
    context.beginPath();
    context.arc(x, y, r, 0, 2 * Math.PI, true);
    context.fillStyle = fill;
    context.fill();
    context.lineWidth = strokeWidth;
    context.strokeStyle = strokeColor;
    context.stroke();
};

const drawSim = function() {
  if (fixtures.length > 0) {
    fixtures.forEach(function(f) {
      f.color = getPixelHex( stageCtx, f.x, f.y );
      drawCircle( f.x, f.y, 10, f.color, 5, f.color, simCtx );
    });
  }
};

const drawFixtures = function() {
  drawNewStageFrame(); // clear previous fixtures
  if (fixtures.length > 0) {
    fixtures.forEach(function(f) {
      drawCircle( f.x, f.y, 7, '#FFF0', 3, '#222', stageCtx );
    });
  }
};

const drawNewStageFrame = function() {
  stageCtx.drawImage(video, 0, 0, vw, vh);
};

const drawVideo = function() {
  if (video.paused || video.ended) {
    gen = false; // reset gen flag if nec
    // prevTime = 0;
    return;
  }
  drawNewStageFrame(); // draws new frame of video to stage canvas
  drawFixtures(); // draw fixtures back over the top of video
  simCtx.clearRect(0, 0, vw, vh); // clear previous sim canvas to avoid aliasing
  if (overlay) {
    drawSimOverlay(); // draw fixtures back into sim
  } else {
    drawSim();
  }
  requestAnimationFrame( drawVideo );
};





// ~~~ Fixture x & y from mouse click

const getMousePos = function( canvas, event ) {
  const rect = canvas.getBoundingClientRect(); // to use clientX and clientY and normalize across browsers
  const x = event.clientX - rect.left;
  const y = event.clientY - rect.top;
  return { x, y };
}


// ~~~ Fixture color for pixel hex

const hex = function( value ) {
  const hex = value.toString(16);
  return hex.length === 1 ? `0${hex}` : hex;
};

const getPixelHex = function( context, x, y ) {
  const rgb = context.getImageData( x, y, 1, 1 );
  return "#" + hex( rgb.data[0] ) + hex( rgb.data[1] ) + hex( rgb.data[2] );
};



// ~~~~~ Node template for Fixture log
const fLogTemplate = function( posNum, fid, x, y ) {
  return `<p>
    # <input type="number" class="f-param f-posnum" value="${ posNum }" data-prop="pos" data-fid="${ fid }"/>
    x: <input type="number" class="f-param" value="${ x }" data-prop="x" min="0" max="${ vw - 1 }" data-fid="${ fid }"/>
    y: <input type="number" class="f-param" value="${ y }" data-prop="y" min="0" max="${ vh - 1 }" data-fid="${ fid }"/>
    <button class="f-delete" data-fid="${ fid }">&times;</button>
  </p>`;
};

// fixture log helper - redraw whole fixture log
const fixtureLog = function( sort=false ) {
    $('#fixtures-main').empty();
    let fArray;
    if (sort) {
      fArray = _(fixtures).sortBy( 'posNum' );
    } else {
      fArray = fixtures;
    }
    for (let i = 0; i < fArray.length; i++) {
      const f = fArray[i];
      const node = $( fLogTemplate( f.posNum, f.fid, f.x, f.y ) );
      node.appendTo( "#fixtures-main" );
    }
};

// fixture duplicates - check for fixtures with same position number
// const checkforDups = function( fixture ) {
//   const srcPosNum = fixture.posNum;
//   const dupChecker = _.matcher({ posNum: srcPosNum });
//   const dups = _.filter( fixtures, dupChecker );
//   if ( dups.length > 1 ) {
//     // class name for dup highlighting
//     return "dup";
//   } else {
//     return "";
//   }
// };


// fixture append - if added a new fixture by mouse click, don't want to redraw whole thing re sorting
const fixtureLogAppend = function( f ) {
  const node = $( fLogTemplate( f.posNum, f.fid, f.x, f.y ) );
  node.appendTo( '#fixtures-main' );
};

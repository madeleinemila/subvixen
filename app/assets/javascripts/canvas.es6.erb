let video;
const fixtures = [];

// only run this js on stage page ready
$('.pages.stage').ready(function() {
  // using vanilla js from this point on to avoid vid/canvas perform issues
  // get video
  video = document.getElementById('stage-video');
  let vw, vh;
  // get canvas contexts
  const stage = document.getElementById('stage-canvas');
  const stageCtx = stage.getContext('2d');
  const sim = document.getElementById('sim-canvas');
  const simCtx = sim.getContext('2d');

  // when video metadata is available
  video.addEventListener('loadedmetadata', function() {
    vw = this.videoWidth || this.width;
    vh = this.videoHeight || this.height;
    stage.width = vw;
    sim.width = vw;
    stage.height = vh;
    sim.height = vh;
    // ****** FIXTURE DISPLAY (defining here for correct width/height values)
    const drawFixtures = function() {
      if (fixtures) {
        fixtures.forEach(function(f) {
          const centerX = f.x;
          const centerY = f.y;
          const radius = 10;
          stageCtx.beginPath();
          stageCtx.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);
          stageCtx.fillStyle = 'white';
          stageCtx.fill();
          stageCtx.lineWidth = 5;
          stageCtx.strokeStyle = '#222';
          stageCtx.stroke();
        });
      }
    };
    const drawVideo = function() {
      if (video.paused || video.ended) {
        return;
      }
      stageCtx.drawImage(video, 0, 0, vw, vh);
      simCtx.drawImage(video, 0, 0, vw, vh);
      drawFixtures(); // draw fixtures back over the top of video
      requestAnimationFrame( drawVideo );
    };

    drawFixtures();

    // ******* FIXTURE CREATION *********
    stage.addEventListener('click', function(e) {
      const mousePos = getMousePos( this, e );
      fixtures.push({
        x: mousePos.x,
        y: mousePos.y,
      });
      drawFixtures();
    });


    // when video plays, draw to the canvases (canvi?)
    video.addEventListener('play', drawVideo, false);






  }, false); // explicit false re useCapture for older browser compat











}); // end page ready




// *** Component functions ***




const getMousePos = function( canvas, event ) {
  const rect = canvas.getBoundingClientRect(); // to use clientX and clientY and normalize across browsers
  const x = event.clientX - rect.left;
  const y = event.clientY - rect.top;
  return { x, y };
}
